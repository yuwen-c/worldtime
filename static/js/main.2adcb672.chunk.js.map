{"version":3,"sources":["component/Option.js","component/Searchbox.js","component/Timezone.js","component/Alltimezone.js","component/ErrorBoundary.js","container/App.js","serviceWorker.js","index.js"],"names":["Option","value","Searchbox","PchangeFun","PkeydownFunc","PcompleteCity","PerrorMes","className","onChange","onKeyDown","id","list","type","aria-describedby","placeholder","map","item","index","key","length","Timezone","Ptimezone","timezone","datetime","slice","splitedArr","filter","includes","split","ErrorBoundary","prop","state","hasError","error","errorInfo","console","log","this","props","children","React","Component","App","changeFunc","event","setState","target","toLowerCase","filteredSplitedCity","compareCity","getTimezoneStr","fetchTimezone","keydownFunc","keyCode","city","inputValue","i","timezoneArr","fetchStr","forEach","TzStr","fetch","then","response","json","result","Intl","DateTimeFormat","resolvedOptions","timeZone","timerID","setInterval","clearInterval","errorMes","capitalCompleteCity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2adcb672.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Option = ({value}) => {\n    return(\n        <option value={value}></option>\n    )\n}\n\nexport default Option;\n\n","import React from 'react';\nimport Option from './Option';\n\n\n\nconst Searchbox = ({PchangeFun, PkeydownFunc, PcompleteCity, PerrorMes}) => {\n    return (\n        <div className=\"measure pa4 black-80 \">\n            <label  className=\"f4 b db\">What time is it in</label><br/>\n            <input \n            onChange={PchangeFun}\n            onKeyDown={PkeydownFunc}\n            id=\"city\" \n            list=\"cityDatalist\" \n            className=\"input-reset ba b--black-30 pa2 db w-60\" \n            type=\"text\" \n            aria-describedby=\"name-desc\" \n            placeholder=\"enter city name\"\n            ></input>\n            <br/>\n            <small id=\"name-desc\" \n            className=\"f5 black-60 db mb2\">{PerrorMes}</small>\n            <datalist id='cityDatalist' >\n            {\n                // map the comparison results so every city can show in the autocomplete component \n                PcompleteCity.map((item, index) => {\n                    return <Option \n                    key={item}\n                    value={item[item.length-1]}/>\n                })\n\n            }\n            </datalist>\n        </div>\n    )\n}\n\nexport default Searchbox;","import React from 'react';\n\nconst Timezone = ({Ptimezone}) => {\n    return (\n        <div>\n            <h1 className=\"f4 bold center mw5 tc\">{Ptimezone.timezone}</h1>\n            <ul className=\"list pl0 ml0 center mw5 ba b--mid-gray br2\">\n                <li className=\"ph3 pv2 tc bb b--mid-gray\">{Ptimezone.datetime.slice(0,10)}</li>\n                <li className=\"ph3 pv2 tc\">{Ptimezone.datetime.slice(11,19)}</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Timezone;","\nconst Alltimezone = [\"Africa/Abidjan\",\"Africa/Accra\",\"Africa/Algiers\",\"Africa/Bissau\",\"Africa/Cairo\",\"Africa/Casablanca\",\"Africa/Ceuta\",\"Africa/El_Aaiun\",\"Africa/Johannesburg\",\"Africa/Juba\",\"Africa/Khartoum\",\"Africa/Lagos\",\"Africa/Maputo\",\"Africa/Monrovia\",\"Africa/Nairobi\",\"Africa/Ndjamena\",\"Africa/Sao_Tome\",\"Africa/Tripoli\",\"Africa/Tunis\",\"Africa/Windhoek\",\"America/Adak\",\"America/Anchorage\",\"America/Araguaina\",\"America/Argentina/Buenos_Aires\",\"America/Argentina/Catamarca\",\"America/Argentina/Cordoba\",\"America/Argentina/Jujuy\",\"America/Argentina/La_Rioja\",\"America/Argentina/Mendoza\",\"America/Argentina/Rio_Gallegos\",\"America/Argentina/Salta\",\"America/Argentina/San_Juan\",\"America/Argentina/San_Luis\",\"America/Argentina/Tucuman\",\"America/Argentina/Ushuaia\",\"America/Asuncion\",\"America/Atikokan\",\"America/Bahia\",\"America/Bahia_Banderas\",\"America/Barbados\",\"America/Belem\",\"America/Belize\",\"America/Blanc-Sablon\",\"America/Boa_Vista\",\"America/Bogota\",\"America/Boise\",\"America/Cambridge_Bay\",\"America/Campo_Grande\",\"America/Cancun\",\"America/Caracas\",\"America/Cayenne\",\"America/Chicago\",\"America/Chihuahua\",\"America/Costa_Rica\",\"America/Creston\",\"America/Cuiaba\",\"America/Curacao\",\"America/Danmarkshavn\",\"America/Dawson\",\"America/Dawson_Creek\",\"America/Denver\",\"America/Detroit\",\"America/Edmonton\",\"America/Eirunepe\",\"America/El_Salvador\",\"America/Fort_Nelson\",\"America/Fortaleza\",\"America/Glace_Bay\",\"America/Godthab\",\"America/Goose_Bay\",\"America/Grand_Turk\",\"America/Guatemala\",\"America/Guayaquil\",\"America/Guyana\",\"America/Halifax\",\"America/Havana\",\"America/Hermosillo\",\"America/Indiana/Indianapolis\",\"America/Indiana/Knox\",\"America/Indiana/Marengo\",\"America/Indiana/Petersburg\",\"America/Indiana/Tell_City\",\"America/Indiana/Vevay\",\"America/Indiana/Vincennes\",\"America/Indiana/Winamac\",\"America/Inuvik\",\"America/Iqaluit\",\"America/Jamaica\",\"America/Juneau\",\"America/Kentucky/Louisville\",\"America/Kentucky/Monticello\",\"America/La_Paz\",\"America/Lima\",\"America/Los_Angeles\",\"America/Maceio\",\"America/Managua\",\"America/Manaus\",\"America/Martinique\",\"America/Matamoros\",\"America/Mazatlan\",\"America/Menominee\",\"America/Merida\",\"America/Metlakatla\",\"America/Mexico_City\",\"America/Miquelon\",\"America/Moncton\",\"America/Monterrey\",\"America/Montevideo\",\"America/Nassau\",\"America/New_York\",\"America/Nipigon\",\"America/Nome\",\"America/Noronha\",\"America/North_Dakota/Beulah\",\"America/North_Dakota/Center\",\"America/North_Dakota/New_Salem\",\"America/Ojinaga\",\"America/Panama\",\"America/Pangnirtung\",\"America/Paramaribo\",\"America/Phoenix\",\"America/Port-au-Prince\",\"America/Port_of_Spain\",\"America/Porto_Velho\",\"America/Puerto_Rico\",\"America/Punta_Arenas\",\"America/Rainy_River\",\"America/Rankin_Inlet\",\"America/Recife\",\"America/Regina\",\"America/Resolute\",\"America/Rio_Branco\",\"America/Santarem\",\"America/Santiago\",\"America/Santo_Domingo\",\"America/Sao_Paulo\",\"America/Scoresbysund\",\"America/Sitka\",\"America/St_Johns\",\"America/Swift_Current\",\"America/Tegucigalpa\",\"America/Thule\",\"America/Thunder_Bay\",\"America/Tijuana\",\"America/Toronto\",\"America/Vancouver\",\"America/Whitehorse\",\"America/Winnipeg\",\"America/Yakutat\",\"America/Yellowknife\",\"Antarctica/Casey\",\"Antarctica/Davis\",\"Antarctica/DumontDUrville\",\"Antarctica/Macquarie\",\"Antarctica/Mawson\",\"Antarctica/Palmer\",\"Antarctica/Rothera\",\"Antarctica/Syowa\",\"Antarctica/Troll\",\"Antarctica/Vostok\",\"Asia/Almaty\",\"Asia/Amman\",\"Asia/Anadyr\",\"Asia/Aqtau\",\"Asia/Aqtobe\",\"Asia/Ashgabat\",\"Asia/Atyrau\",\"Asia/Baghdad\",\"Asia/Baku\",\"Asia/Bangkok\",\"Asia/Barnaul\",\"Asia/Beirut\",\"Asia/Bishkek\",\"Asia/Brunei\",\"Asia/Chita\",\"Asia/Choibalsan\",\"Asia/Colombo\",\"Asia/Damascus\",\"Asia/Dhaka\",\"Asia/Dili\",\"Asia/Dubai\",\"Asia/Dushanbe\",\"Asia/Famagusta\",\"Asia/Gaza\",\"Asia/Hebron\",\"Asia/Ho_Chi_Minh\",\"Asia/Hong_Kong\",\"Asia/Hovd\",\"Asia/Irkutsk\",\"Asia/Jakarta\",\"Asia/Jayapura\",\"Asia/Jerusalem\",\"Asia/Kabul\",\"Asia/Kamchatka\",\"Asia/Karachi\",\"Asia/Kathmandu\",\"Asia/Khandyga\",\"Asia/Kolkata\",\"Asia/Krasnoyarsk\",\"Asia/Kuala_Lumpur\",\"Asia/Kuching\",\"Asia/Macau\",\"Asia/Magadan\",\"Asia/Makassar\",\"Asia/Manila\",\"Asia/Nicosia\",\"Asia/Novokuznetsk\",\"Asia/Novosibirsk\",\"Asia/Omsk\",\"Asia/Oral\",\"Asia/Pontianak\",\"Asia/Pyongyang\",\"Asia/Qatar\",\"Asia/Qostanay\",\"Asia/Qyzylorda\",\"Asia/Riyadh\",\"Asia/Sakhalin\",\"Asia/Samarkand\",\"Asia/Seoul\",\"Asia/Shanghai\",\"Asia/Singapore\",\"Asia/Srednekolymsk\",\"Asia/Taipei\",\"Asia/Tashkent\",\"Asia/Tbilisi\",\"Asia/Tehran\",\"Asia/Thimphu\",\"Asia/Tokyo\",\"Asia/Tomsk\",\"Asia/Ulaanbaatar\",\"Asia/Urumqi\",\"Asia/Ust-Nera\",\"Asia/Vladivostok\",\"Asia/Yakutsk\",\"Asia/Yangon\",\"Asia/Yekaterinburg\",\"Asia/Yerevan\",\"Atlantic/Azores\",\"Atlantic/Bermuda\",\"Atlantic/Canary\",\"Atlantic/Cape_Verde\",\"Atlantic/Faroe\",\"Atlantic/Madeira\",\"Atlantic/Reykjavik\",\"Atlantic/South_Georgia\",\"Atlantic/Stanley\",\"Australia/Adelaide\",\"Australia/Brisbane\",\"Australia/Broken_Hill\",\"Australia/Currie\",\"Australia/Darwin\",\"Australia/Eucla\",\"Australia/Hobart\",\"Australia/Lindeman\",\"Australia/Lord_Howe\",\"Australia/Melbourne\",\"Australia/Perth\",\"Australia/Sydney\",\"CET\",\"CST6CDT\",\"EET\",\"EST\",\"EST5EDT\",\"Etc/GMT\",\"Etc/GMT+1\",\"Etc/GMT+10\",\"Etc/GMT+11\",\"Etc/GMT+12\",\"Etc/GMT+2\",\"Etc/GMT+3\",\"Etc/GMT+4\",\"Etc/GMT+5\",\"Etc/GMT+6\",\"Etc/GMT+7\",\"Etc/GMT+8\",\"Etc/GMT+9\",\"Etc/GMT-1\",\"Etc/GMT-10\",\"Etc/GMT-11\",\"Etc/GMT-12\",\"Etc/GMT-13\",\"Etc/GMT-14\",\"Etc/GMT-2\",\"Etc/GMT-3\",\"Etc/GMT-4\",\"Etc/GMT-5\",\"Etc/GMT-6\",\"Etc/GMT-7\",\"Etc/GMT-8\",\"Etc/GMT-9\",\"Etc/UTC\",\"Europe/Amsterdam\",\"Europe/Andorra\",\"Europe/Astrakhan\",\"Europe/Athens\",\"Europe/Belgrade\",\"Europe/Berlin\",\"Europe/Brussels\",\"Europe/Bucharest\",\"Europe/Budapest\",\"Europe/Chisinau\",\"Europe/Copenhagen\",\"Europe/Dublin\",\"Europe/Gibraltar\",\"Europe/Helsinki\",\"Europe/Istanbul\",\"Europe/Kaliningrad\",\"Europe/Kiev\",\"Europe/Kirov\",\"Europe/Lisbon\",\"Europe/London\",\"Europe/Luxembourg\",\"Europe/Madrid\",\"Europe/Malta\",\"Europe/Minsk\",\"Europe/Monaco\",\"Europe/Moscow\",\"Europe/Oslo\",\"Europe/Paris\",\"Europe/Prague\",\"Europe/Riga\",\"Europe/Rome\",\"Europe/Samara\",\"Europe/Saratov\",\"Europe/Simferopol\",\"Europe/Sofia\",\"Europe/Stockholm\",\"Europe/Tallinn\",\"Europe/Tirane\",\"Europe/Ulyanovsk\",\"Europe/Uzhgorod\",\"Europe/Vienna\",\"Europe/Vilnius\",\"Europe/Volgograd\",\"Europe/Warsaw\",\"Europe/Zaporozhye\",\"Europe/Zurich\",\"HST\",\"Indian/Chagos\",\"Indian/Christmas\",\"Indian/Cocos\",\"Indian/Kerguelen\",\"Indian/Mahe\",\"Indian/Maldives\",\"Indian/Mauritius\",\"Indian/Reunion\",\"MET\",\"MST\",\"MST7MDT\",\"PST8PDT\",\"Pacific/Apia\",\"Pacific/Auckland\",\"Pacific/Bougainville\",\"Pacific/Chatham\",\"Pacific/Chuuk\",\"Pacific/Easter\",\"Pacific/Efate\",\"Pacific/Enderbury\",\"Pacific/Fakaofo\",\"Pacific/Fiji\",\"Pacific/Funafuti\",\"Pacific/Galapagos\",\"Pacific/Gambier\",\"Pacific/Guadalcanal\",\"Pacific/Guam\",\"Pacific/Honolulu\",\"Pacific/Kiritimati\",\"Pacific/Kosrae\",\"Pacific/Kwajalein\",\"Pacific/Majuro\",\"Pacific/Marquesas\",\"Pacific/Nauru\",\"Pacific/Niue\",\"Pacific/Norfolk\",\"Pacific/Noumea\",\"Pacific/Pago_Pago\",\"Pacific/Palau\",\"Pacific/Pitcairn\",\"Pacific/Pohnpei\",\"Pacific/Port_Moresby\",\"Pacific/Rarotonga\",\"Pacific/Tahiti\",\"Pacific/Tarawa\",\"Pacific/Tongatapu\",\"Pacific/Wake\",\"Pacific/Wallis\",\"WET\"]\n\n\n// get ride of timezones such as: \"CET\", \"MET\", \"WET\"...\nconst slashAlltimezone = Alltimezone.filter(item => {\n    return item.includes(\"/\")\n})\n\n// two dimension array:\n//  [[\"Africa\", \"Abidjan\"], [\"Africa\", \"Accra\"], ...]\nexport const splitedArr = slashAlltimezone.map(item => {\n    return item.split(\"/\")\n})\n\n//export多項的方式：1. 前面直接加export，2. import {   }\n\n\n","import React from 'react';\n\nclass ErrorBoundary extends React.Component{\n    constructor(prop){\n        super(prop);\n        this.state = {\n            hasError: false\n        }\n    }\n    \n    componentDidCatch(error, errorInfo){\n        console.log(error, errorInfo)\n    }\n\n    render(){\n        if(this.state.hasError === true){\n            return(<h2 className='tc pa6'>something's wrong here</h2>)\n        }\n        return this.props.children;\n    }\n\n}\nexport default ErrorBoundary;","import React from 'react';\nimport Searchbox from '../component/Searchbox';\nimport Timezone from '../component/Timezone';\nimport {splitedArr} from '../component/Alltimezone';\nimport ErrorBoundary from '../component/ErrorBoundary';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      Searchbox:'',\n      Timezone:[],\n      // TzStr : user local timezone\n      TzStr : Intl.DateTimeFormat().resolvedOptions().timeZone,\n    }\n  }\n\n// listen to the input change, setState of Searchbox and change to lower case \n  changeFunc = (event) => {    \n//inputFunc = (event) => {  //use onChange to detect any changes\n    this.setState({Searchbox: event.target.value.toLowerCase()})\n    // call compare function\n    // send event.target.value as the second parameter, cause this.state.searchBox has a delay\n    const filteredSplitedCity = this.compareCity(splitedArr, event.target.value.toLowerCase());\n    // if only get one city after filter, fetch directly without press enter\n    if(filteredSplitedCity.length === 1){\n      // call getTimezoneStr function\n      this.getTimezoneStr(filteredSplitedCity)\n      this.fetchTimezone();\n    }\n  }\n\n  \n//when press \"enter\", set State of searchbox, find the city, send fetch\n  keydownFunc = (event) => {\n    if(event.keyCode === 13){\n      // call compare function, filter input cityname with timezone\n      const filteredSplitedCity = this.compareCity(splitedArr, this.state.Searchbox)\n      // if input is valid, send the fetch string with the first element of filteredCity\n      if(filteredSplitedCity.length!==0){\n      // call getTimezoneStr function\n        this.getTimezoneStr(filteredSplitedCity)\n        this.fetchTimezone()\n      }\n    }\n  }\n\n// when page loading, do fetch function every second \n  componentDidMount(){\n    this.timerID = setInterval(this.fetchTimezone, 1000);\n  }\n\n// clear interval\n  componentWillUnmount(){\n    clearInterval(this.timerID);\n  }\n\n// compare input value with [[\"Africa\", \"Abidjan\"], [\"Africa\", \"Accra\"], ...]\n  compareCity = (city, inputValue) => {\n    for(let i in inputValue){\n    // if length of input value > city name => error. => use try catch\n      try{\n        city = city.filter(item => {\n          // only compare with the last city name, don't compare with \"Africa\"\n          return item[item.length-1][i].toLowerCase() === inputValue[i]\n        })\n      }\n      catch(error){\n        console.log(\"error\", error)\n      }\n    }\n    return city;\n  }\n\n//  convert [\"Africa\", \"Abidjan\"] to \"Africa/Abidjan\"\n  getTimezoneStr = (timezoneArr) => {\n    let fetchStr = '';\n    timezoneArr[0].forEach(item => fetchStr = fetchStr + item + \"/\");\n    this.setState({TzStr: fetchStr.slice(0, -1)});\n    return fetchStr.slice(0, -1);\n  }  \n\n// get the state of TzStr and fetch\n  fetchTimezone = () =>{\n    fetch(\"https://worldtimeapi.org/api/timezone/\"+ this.state.TzStr)\n    .then(response => response.json())\n    .then(result => this.setState({Timezone: result}))\n  }\n\n\n  render(){\n// =========== Autocomplete part: ============\n// compare the searchbox value and Alltimezone(splitedArr), get completeCity, then show the result in Option\n    // lst time(1st letter): compare with all city list (splitedArr)\n    // 2nd time(2nd letter): compare with the result of 1st filter.\n    let capitalCompleteCity = [];\n    // when input nothing, do not show options\n    if(this.state.Searchbox.length!==0){\n      // call compare function\n      capitalCompleteCity = this.compareCity(splitedArr, this.state.Searchbox)\n    }\n\n// =========== Main Page: ============\n// if has not get any timezone data, show \"loading\"\n    if(this.state.Timezone.length === 0){\n      return(<h2 className='tc pa6'>loading...</h2>)\n    }\n    else{\n    // if input is invalid, show error message in <p> of searchbox.\n    // condition: w/o compare anything && input is not empty\n      let errorMes;\n      if(capitalCompleteCity.length === 0 && this.state.Searchbox.length !==0){\n        errorMes = 'invalid timezone'\n      }\n      else{\n        errorMes = '';\n      }\n      return(\n        <div> \n          <ErrorBoundary>\n            <Searchbox \n            // send the comparison result - completeCity through PcompleteCity\n            PcompleteCity={capitalCompleteCity} \n            PchangeFun={this.changeFunc}\n            PkeydownFunc={this.keydownFunc}\n            // invalid input => show error message\n            PerrorMes={errorMes}\n            />\n          </ErrorBoundary>\n          <ErrorBoundary>\n            <Timezone Ptimezone={this.state.Timezone}/>\n          </ErrorBoundary>\n        </div>\n      )\n    }\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}